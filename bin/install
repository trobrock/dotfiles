#!/usr/bin/env bash

set -e

source "$(dirname "$0")/lib/logging.sh"
source "$(dirname "$0")/clean-broken-symlinks"

install_package_manager() {
  if [ "$(uname)" = "Darwin" ]; then
    if [ -z "$(command -v brew)" ]; then
      log "Homebew not found, installing..."
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
  elif [ "$(uname)" = "Linux" ]; then
    if [ -z "$(command -v yay)" ]; then
      log "yay not found, installing..."
      sudo pacman -S --noconfirm --needed git base-devel
      git clone https://aur.archlinux.org/yay.git /tmp/yay
      pushd /tmp/yay
      makepkg -si
      popd
      rm -rf /tmp/yay
    fi
  else
    log_error "Unsupported OS"
    exit 1
  fi
}

install_stow() {
  if [ -z "$(command -v stow)" ]; then
    log "stow not found, installing..."
    if [ "$(uname)" = "Darwin" ]; then
      brew install stow
    elif [ "$(uname)" = "Linux" ]; then
      yay -S --noconfirm stow
    else
      log_error "Unsupported OS for stow installation"
      exit 1
    fi
  fi
}

change_shell_to_zsh() {
  if [[ "$SHELL" != *"zsh" ]]; then
    if [ -z "$(command -v zsh)" ]; then
      log "zsh not found, installing..."
      if [ "$(uname)" = "Darwin" ]; then
        brew install zsh
      elif [ "$(uname)" = "Linux" ]; then
        yay -S --noconfirm zsh
      else
        log_error "Unsupported OS for zsh installation"
        exit 1
      fi
    fi

    log "Changing default shell to zsh..."
    chsh -s /usr/bin/zsh
    log "Default shell changed to zsh. Please logout and login again for changes to take effect."
    exit
  fi
}

init_tpm() {
  if [ ! -d "$HOME/.config/tmux/plugins" ] ; then
    log "Initializing Tmux Plugin Manager (TPM)..."
    git clone https://github.com/tmux-plugins/tpm $HOME/.config/tmux/plugins/tpm
  fi
}

init_goose() {
  if [ ! -d "$HOME/.config/goose" ] ; then
    mkdir -p $HOME/.config/goose
  fi
}

archfile_packages() {
  grep -v '^#' Archfile | tr '\n' ' '
}

install_packages() {
  log "Installing packages..."
  if [ "$(uname)" = "Darwin" ]; then
    brew bundle
  elif [ "$(uname)" = "Linux" ]; then
    archfile_remove_missing
    yay -S --needed --noconfirm $(archfile_packages)
    archfile_write_lock
  fi
}

archfile_write_lock() {
  pacman -Qe $(archfile_packages) | awk '{print $1}' | sort > Archfile.lock
}

archfile_remove_missing() {
  if [ -f Archfile.lock ]; then
    packages=()
    while read -r package; do
      if ! grep -q "^$package\$" Archfile; then
        packages+=("$package")
      fi
    done < Archfile.lock

    if [ ${#packages[@]} -gt 0 ]; then
      log "Removing packages not in Archfile: ${packages[*]}"
      yay -Rns --noconfirm "${packages[@]}" || true
    fi
  fi
}

init_1password() {
  if [ "$(uname)" = "Linux" ]; then
    if [ ! -f $HOME/.config/1Password/settings/settings.json ] ; then
      log "enabling h/w acceleration for 1password..."
      mkdir -p $HOME/.config/1Password/settings
      cat > $HOME/.config/1Password/settings/settings.json <<JSON
{
  "version": 1,
  "app.useHardwareAcceleration": true,
  "app.theme": "dark",
  "browsers.extension.enabled": true
}
JSON
    fi
  fi
}

get_machine_name() {
  if [ ! -f .machine_name ]; then
    names=$(op --account=robrock.1password.com item get "ZSH Secrets" --format json | jq -r '.sections[].label')
    echo "Available machine names:"
    select machine_name in $names; do
      if [ -n "$machine_name" ]; then
        echo "Selected machine name: $machine_name"
        break
      else
        echo "Invalid selection, please try again."
      fi
    done
    echo $machine_name > .machine_name
  fi

  cat .machine_name
}

backup_secrets() {
  if [ -f $HOME/.zsh_secrets ]; then
    mv $HOME/.zsh_secrets $HOME/.zsh_secrets.bak
    rm -f $HOME/.zsh_secrets
  fi
}

install_secrets() {
  log "Installing secrets.zsh from 1password..."
  if [ -z "$(command -v op)" ] || ( ! op vault list > /dev/null 2>&1 ); then
    log_error "1Password CLI (op) is not installed. Please install it first."
  else
    backup_secrets

    # grab all the secrets from the "common" section and write them to the file
    op --account=robrock.1password.com item get "ZSH Secrets" --format json | jq -r ".fields[] | select(.section.label == \"common\") | \"\(.label) \(.value)\"" | while read -r line; do
      label=$(echo "$line" | cut -d' ' -f1)
      value=$(echo "$line" | cut -d' ' -f2-)
      echo "export $label=\"$value\"" >> $HOME/.zsh_secrets
    done

    section=$(get_machine_name)

    # grab all the secrets from that section and write them to the file
    op --account=robrock.1password.com item get "ZSH Secrets" --format json | jq -r ".fields[] | select(.section.label == \"$section\") | \"\(.label) \(.value)\"" | while read -r line; do
      label=$(echo "$line" | cut -d' ' -f1)
      value=$(echo "$line" | cut -d' ' -f2-)
      echo "export $label=\"$value\"" >> $HOME/.zsh_secrets
    done
  fi
}

setup_fingerprint() {
  fingerprints=$(fprintd-list `whoami` | awk '/ - /{print $3}')
  if [ -n "$fingerprints" ]; then
    return
  fi

  log "Let's setup your right index finger as the first fingerprint.\nKeep moving the finger around on sensor until the process completes."
  sudo fprintd-enroll `whoami`

  log "Now let's verify that it's working correctly."

  if fprintd-verify; then
    log "Perfect! Now you can use your fingerprint on the lock screen (Super + Escape)."
  else
    log_error "Something went wrong. Maybe try again?"
  fi
}

allow_fingerprint_usage() {
  setup_fingerprint

  # Add fingerprint authentication as an option for sudo
  if ! grep -q pam_fprintd.so /etc/pam.d/sudo; then
    sudo sed -i '1i auth    sufficient pam_fprintd.so' /etc/pam.d/sudo
  fi

  # Add fingerprint authentication as an option for hyprpolkitagent
  if [ ! -f /etc/pam.d/polkit-1 ] || ! grep -q pam_fprintd.so /etc/pam.d/polkit-1; then
    sudo tee /etc/pam.d/polkit-1 >/dev/null <<'EOF'
auth      sufficient pam_fprintd.so
auth      sufficient pam_unix.so
auth      required   pam_deny.so

account   required pam_unix.so
password  required pam_unix.so
session   required pam_unix.so
EOF
  fi
}

setup_auto_login() {
  if [ ! -f /etc/systemd/system/getty@tty1.service.d/override.conf ]; then
    log "Setting up auto-login..."
    sudo mkdir -p /etc/systemd/system/getty@tty1.service.d
    sudo tee /etc/systemd/system/getty@tty1.service.d/override.conf >/dev/null <<EOF
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin $USER --noclear %I \$TERM
EOF
  fi
}

setup_firewall() {
  log "Setting up firewall rules..."

  # Start and enable firewalld service
  sudo systemctl start firewalld
  sudo systemctl enable firewalld

  # Set default zone to public (equivalent to UFW's default deny incoming)
  if [ "$(sudo firewall-cmd --get-default-zone)" != "public" ]; then
    log "Setting default firewall zone to public..."
    sudo firewall-cmd --set-default-zone=public
  fi

  # Remove any existing SSH rules and add SSH (port 22)
  if sudo firewall-cmd --zone=public --list-all | grep -q 'services:.*ssh'; then
    log "Removing existing SSH rules from firewall..."
    sudo firewall-cmd --zone=public --remove-service=ssh --permanent 2>/dev/null || true
  fi
  if ! sudo firewall-cmd --zone=public --list-ports | grep -q '22/tcp'; then
    log "Adding SSH (port 22) to firewall rules..."
    sudo firewall-cmd --zone=public --add-port=22/tcp --permanent
  fi

  # Apply all permanent rules
  sudo firewall-cmd --reload

  log "Firewall setup complete. Default zone: public, SSH allowed on port 22, Docker networking configured."
}

install_package_manager
install_stow
change_shell_to_zsh
init_tpm
init_goose

log "Installing dotfiles using stow..."
source "$(dirname "$0")/lib/stow.sh"
stow --verbose=2 --dotfiles --adopt -t $HOME . 2>&1 | clean_stow_output
clean_broken_symlinks

install_packages
init_1password

install_secrets

if [ "$(uname)" = "Linux" ]; then
  allow_fingerprint_usage
  setup_auto_login
  setup_firewall
fi
